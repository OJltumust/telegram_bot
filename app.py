from flask import Flask, request
import requests
import json
import openpyxl
from io import BytesIO
import dropbox

app = Flask(__name__)

# Telegram config
BOT_TOKEN = "7294714166:AAFK1WNxkPJoUVzMpL5jiJ98ApvVPGvlbzk"
ADMIN_CHAT_ID = "731634508"
WEBHOOK_URL = "https://telegram-bot-flsb.onrender.com/webhook"  # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

# Dropbox config
DROPBOX_REFRESH_TOKEN = "..."
DROPBOX_CLIENT_ID = "..."
DROPBOX_CLIENT_SECRET = "..."
APP_FOLDER = "/BeautyBar"


def get_access_token():
    url = "https://api.dropboxapi.com/oauth2/token"
    data = {
        "grant_type": "refresh_token",
        "refresh_token": DROPBOX_REFRESH_TOKEN,
    }
    auth = (DROPBOX_CLIENT_ID, DROPBOX_CLIENT_SECRET)
    response = requests.post(url, data=data, auth=auth)
    return response.json()["access_token"]


def get_dropbox_client():
    access_token = get_access_token()
    return dropbox.Dropbox(access_token)


def update_balance(phone, amount):
    dbx = get_dropbox_client()
    path = f"{APP_FOLDER}/{phone}/{phone}_appointment.xlsx"

    # 1. –°–∫–∞—á–∏–≤–∞–µ–º Excel
    _, res = dbx.files_download(path)
    workbook = openpyxl.load_workbook(BytesIO(res.content))
    sheet = workbook.active

    # 2. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
    sheet.append([f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç Telegram", phone, f"{amount} –≥—Ä–Ω"])

    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    bio = BytesIO()
    workbook.save(bio)
    bio.seek(0)
    dbx.files_upload(bio.read(), path, mode=dropbox.files.WriteMode.overwrite)


@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    data = request.json
    print("üîî Webhook received:", json.dumps(data, indent=2))

    if "callback_query" in data:
        try:
            query = data["callback_query"]
            print("üîò Callback query:", query)
            callback_data = query["data"]
            print("üì¶ callback_data (raw):", callback_data)

            # üîß –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É 'confirm||380999999999||10' –Ω–∞ —á–∞—Å—Ç–∏
            parts = callback_data.split("||")
            if len(parts) == 3:
                action, phone, amount = parts

                if action == "confirm":
                    print(f"üì• –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {phone}, {amount}")

                    update_balance(phone, amount)  # üëà —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage", json={
                        "chat_id": query["from"]["id"],
                        "text": f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –¥–ª—è {phone} –Ω–∞ {amount} –≥—Ä–Ω"
                    })

                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
                    requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery", json={
                        "callback_query_id": query["id"],
                        "text": "–ë–∞–ª–∞–Ω—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"
                    })
                else:
                    print("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", action)
            else:
                print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data:", callback_data)

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:", str(e))

    return "OK"


@app.route("/send_notification", methods=["POST"])
def send_notification():
    body = request.json  # { "phone": "0981234567", "amount": "200" }

    keyboard = {
        "inline_keyboard": [[
            {
                "text": f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {body['amount']} –≥—Ä–Ω",
                "callback_data": json.dumps({
                    "action": "confirm",
                    "phone": body["phone"],
                    "amount": body["amount"]
                })

            }
        ]]
    }

    requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage", json={
        "chat_id": ADMIN_CHAT_ID,
        "text": f"üì• –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç {body['phone']} –Ω–∞ {body['amount']} –≥—Ä–Ω",
        "reply_markup": keyboard
    })

    return "Notification sent", 200
